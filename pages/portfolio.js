import React, { useEffect, useRef, useState } from "react";
import Head from "next/head";
import styles from "../styles/Portofolio.module.scss";
import Header from "../components/Header";
import portofolioGsapAnimations from "../utils/gsapAnimations/portofolioGsapAnimations";
import PortofolioCard from "../components/PortofolioCard";

import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";

import { portfolioData } from "../utils/data/portfolioData";

gsap.registerPlugin(ScrollTrigger);
gsap.config({
  nullTargetWarn: false,
});

export default function Portfolio() {
  const cardsRef = useRef([]);
  cardsRef.current = [];
  const addToCardsRef = (el) => {
    if (el && !cardsRef.current.includes(el)) {
      cardsRef.current.push(el);
    }
  };

  // the magical helper function (no longer necessary in GSAP 3.3.1 because it was added as ScrollTrigger.batch())...
  function batch(targets, vars) {
    let varsCopy = {},
      interval = vars.interval || 0.1,
      proxyCallback = (type, callback) => {
        let batch = [],
          delay = gsap
            .delayedCall(interval, () => {
              callback(batch);
              batch.length = 0;
            })
            .pause();
        return (self) => {
          batch.length || delay.restart(true);
          batch.push(self.trigger);
          vars.batchMax && vars.batchMax <= batch.length && delay.progress(1);
        };
      },
      p;
    for (p in vars) {
      varsCopy[p] =
        ~p.indexOf("Enter") || ~p.indexOf("Leave")
          ? proxyCallback(p, vars[p])
          : vars[p];
    }
    gsap.utils.toArray(targets).forEach((target) => {
      let config = {};
      for (p in varsCopy) {
        config[p] = varsCopy[p];
      }
      config.trigger = target;
      ScrollTrigger.create(config);
    });
  }

  useEffect(() => {
    cardsRef.current.forEach((element) => {
      // usage:
      batch(element, {
        interval: 0.2, // time window (in seconds) for batching to occur. The first callback that occurs (of its type) will start the timer, and when it elapses, any other similar callbacks for other targets will be batched into an array and fed to the callback. Default is 0.1
        batchMax: 3, // maximum batch size (targets)
        onEnter: (batch) =>
          gsap.to(batch, { autoAlpha: 1, stagger: 0.15, overwrite: true }),
        onLeave: (batch) => gsap.set(batch, { autoAlpha: 0, overwrite: true }),
        onEnterBack: (batch) =>
          gsap.to(batch, { autoAlpha: 1, stagger: 0.15, overwrite: true }),
        onLeaveBack: (batch) =>
          gsap.set(batch, { autoAlpha: 0, overwrite: true }),
        // you can also define things like start, end, etc.
      });
    });
  }, []);

  const panelsRef = useRef([]);
  panelsRef.current = [];
  const addToPanelsRef = (el) => {
    if (el && !panelsRef.current.includes(el)) {
      panelsRef.current.push(el);
    }
  };
  {
    console.log(portfolioData);
  }
  // useEffect(() => {
  //   portofolioGsapAnimations().panel(panelsRef.current);
  //   return () => {};
  // }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>WebNumerik Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <h1 className={styles.title}>
          Mon <span>Portfolio</span>
        </h1>
        <div
          className={`${styles.panel} ${styles.panelBackground}`}
          ref={addToPanelsRef}
        >
          <div className={styles.Portofoliofirst}>

            {portfolioData.map((portfolio) => (
              <div className="card" ref={addToCardsRef} key={portfolio.imgAlt}>
                <PortofolioCard
                  projectTitle={portfolio.projectTitle}
                  demoLink={portfolio.demoLink}
                  repoGitLink={portfolio.repoGitLink}
                  technos={portfolio.technos}
                  mission={portfolio.mission}
                  skills={portfolio.skills}
                  imgSrc={portfolio.imgSrc}
                  imgAlt={portfolio.imgAlt}
                  backgroundImg={portfolio.backgroundImg}
                  flipvertical={false}
                />
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}
