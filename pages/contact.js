import React, { useEffect, useRef } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Contact.module.css";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { useForm } from "react-hook-form";
import useWindowSize from "../utils/getWindowsSize";
import { gsap } from "gsap";

export default function Home() {
  const {
    register,
    handleSubmit,
    // watch,
    formState: { errors },
  } = useForm();
  const onSubmit = (data) => console.log(data);
  // console.log(useWindowSize());
  // const widthSize = useWindowSize().width;
  // watch input value by passing the name of it
  // console.log(watch("nom"));
  const rightRef = useRef();
  const leftRef = useRef();
  // const q = gsap.utils.selector(rightRef.current);


  // useEffect(() => {
  //   useWindowSize;
  // }, [widthSize]);

  useEffect(() => {
    let tl = gsap.timeline();

    tl
    .add("start")
    .from(rightRef.current, {
      duration: 1,
      ease: "bounce.out",
      x: 200,
      opacity: 0,
      repeat: 0,
    },"start")
    .from(leftRef.current, {
      duration: 1,
      ease: "bounce.out",
      x: -200,
      opacity: 0,
      repeat: 0,
    },"start")
    .to(leftRef.current.querySelector(".description"), {
      duration: 1,
      ease: "bounce.out",
      x: -200,
      opacity: 0,
      repeat: 0,
    },"start")
  }, []);

  return (
    <div className="container">
      <Head>
        <title>WebNumerik Contact</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <div className={styles.left} ref={leftRef}>
          {/* <div style={{ position: "absolute", top: "0", left: "0" }}>
            <div
              style={{
                position: "relative",
                width: "50vw" || widthSize / 2,
                height: widthSize > 700 ? "100vh" : "0vh",
              }}
            >
              <Image
                src="/pexels-pixabay-263564.jpg"
                alt="contact"
                className={styles.panelBackground}
                layout="fill"
                objectFit="cover"
                objectPosition="center"
                priority
              />
            </div>
          </div> */}
          <div className={styles.wrapper}>
            <h1 className={styles.title}>LAISSEZ UN MOT</h1>
            <p className={styles.description}>
              Des questions ou mÃªme juste un petit bonjour, envoyez votre
              message.
            </p>
          </div>
        </div>
        <div className={styles.right} ref={rightRef}>
          {" "}
          {/* "handleSubmit" will validate your inputs before invoking "onSubmit" */}
          <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
            {/* register your input into the hook by invoking the "register" function */}
            <label htmlFor="nom">Nom *</label>
            <input
              type="text"
              placeholder="Nom"
              {...register("nom", { required: true })}
              id="nom"
              className={styles.inputText}
            />
            {/* errors will return when field validation fails  */}
            {errors.nom && (
              <span className={styles.error}>This field is required</span>
            )}

            {/* include validation with required or other standard HTML validation rules */}
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              placeholder="Email"
              {...register("email", { required: true })}
              id="email"
              className={styles.inputText}
            />
            {/* errors will return when field validation fails  */}
            {errors.email && (
              <span className={styles.error}>This field is required</span>
            )}

            <label htmlFor="message">Message *</label>
            <textarea
              placeholder="Message..."
              {...register("message", { required: true })}
              id="message"
              className={styles.inputText}
            ></textarea>
            {/* errors will return when field validation fails  */}
            {errors.message && (
              <span className={styles.error}>This field is required</span>
            )}

            <input
              type="submit"
              value="Envoyer le message"
              className={styles.buttonContact}
            />
          </form>
        </div>
      </main>
    </div>
  );
}
